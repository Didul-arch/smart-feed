// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String
  nama     String
  // relation
}

model Kandang {
  id           Int            @id @default(autoincrement())
  nama         String
  lokasi       String?
  kapasitas    Int
  // relation
  sapi         Sapi[]
}

model Sapi {
  id                   Int                      @id @default(autoincrement())
  jenis                String
  bobot                Float
  image                String
  kandang              Kandang                  @relation(fields: [kandangId], references: [id])
  kandangId            Int
  tanggalLahir         DateTime
  tanggalKematian      DateTime?
  jenisKelamin         String // Tambahkan baris ini (atau gunakan Enum jika lebih sesuai)
  // relation
  recordPemberianMakan RecordPemberianMakan[]
  jadwalHarian JadwalHarian[]

}

model Pakan {
  id               Int                      @id @default(autoincrement())
  nama             String
  jenis            String
  banyakStok       Float
  harga            Float?
  image            String
  // relation
  jadwalHarianPagi JadwalHarian[]           @relation("JadwalPagiPakanRel")
  jadwalHarianSore JadwalHarian[]           @relation("JadwalSorePakanRel")
  recordsPakanDiberikan RecordPemberianMakan[] @relation("PakanDiberikanRel")

  // Field Nutrisi
  bk                 Float? // Bahan Kering (%)
  pk                 Float? // Protein Kasar (%)
  sk                 Float? // Serat Kasar (%)
  tdn                Float? // Total Digestible Nutrient (%)
  ca                 Float? // Kalsium (%)
  p                  Float? // Fosfor (%)

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}


enum Hari {
  SENIN
  SELASA
  RABU
  KAMIS
  JUMAT
  SABTU
  MINGGU
}

enum SesiPemberianMakan {
  PAGI
  SORE
}


model JadwalHarian {
  id          String  @id @default(cuid())
  sapi     Sapi @relation(fields: [sapiId], references: [id], onDelete: Cascade)
  sapiId   Int
  hari        Hari // Enum: SENIN, SELASA, ..., MINGGU

  pagiPakan   Pakan?  @relation("JadwalPagiPakanRel", fields: [pagiPakanId], references: [id], onDelete: SetNull)
  pagiPakanId Int?
  pagiWaktu   String? // Contoh: "07:00"

  sorePakan   Pakan?  @relation("JadwalSorePakanRel", fields: [sorePakanId], references: [id], onDelete: SetNull)
  sorePakanId Int?
  soreWaktu   String? // Contoh: "16:00"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([sapiId, hari]) // Satu kandang hanya punya satu jadwal per hari dalam seminggu
}

model RecordPemberianMakan {
  id                 String             @id @default(cuid())
  sapi               Sapi               @relation(fields: [sapiId], references: [id], onDelete: Cascade)
  sapiId             Int
  kandangId          Int // Denormalisasi untuk query lebih mudah, diisi dari sapi.kandangId

  pakanDiberikan     Pakan              @relation("PakanDiberikanRel", fields: [pakanDiberikanId], references: [id], onDelete: Restrict)
  pakanDiberikanId   Int
  jumlahDiberikan    Float // JUMLAH PAKAN YANG DIBERIKAN (misal dalam KG)

  tanggalPemberian     DateTime
  sesi                 SesiPemberianMakan
  waktuPemberianActual DateTime           @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([sapiId, tanggalPemberian, sesi])
  @@index([kandangId, tanggalPemberian])
}